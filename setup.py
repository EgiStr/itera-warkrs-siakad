#!/usr/bin/env python3
"""
Setup script for WAR KRS ITERA configuration
"""

import json
import sys
from pathlib import Path


def get_user_input(prompt: str, default: str = "") -> str:
    """Get user input with optional default value"""
    if default:
        result = input(f"{prompt} [{default}]: ").strip()
        return result if result else default
    else:
        while True:
            result = input(f"{prompt}: ").strip()
            if result:
                return result
            print("This field is required!")


def setup_cookies():
    """Setup cookie configuration"""
    print("\nüç™ SETUP COOKIES:")
    print("1. Buka browser dan login ke https://siakad.itera.ac.id")
    print("2. Tekan F12 ‚Üí Application ‚Üí Cookies ‚Üí https://siakad.itera.ac.id")
    print("3. Copy nilai cookies berikut:")
    print()
    
    ci_session = get_user_input("Masukkan ci_session")
    cf_clearance = get_user_input("Masukkan cf_clearance")
    
    return ci_session, cf_clearance


def setup_courses():
    """Setup target courses"""
    print("\nüéØ SETUP TARGET COURSES:")
    print("Format: KODE_MK ID_KELAS")
    print("Contoh: SD25-41301 37704")
    print("Ketik 'done' untuk selesai")
    print()
    
    courses = {}
    while True:
        course_input = input("Masukkan KODE_MK ID_KELAS (atau 'done'): ").strip()
        
        if course_input.lower() == 'done':
            break
            
        if ' ' not in course_input:
            print("Format salah! Gunakan: KODE_MK ID_KELAS")
            continue
            
        parts = course_input.split()
        if len(parts) != 2:
            print("Format salah! Gunakan: KODE_MK ID_KELAS")
            continue
            
        course_code, class_id = parts
        
        if '-' not in course_code or not class_id.isdigit():
            print("Format salah! Pastikan KODE_MK mengandung '-' dan ID_KELAS adalah angka")
            continue
            
        courses[course_code] = class_id
        print(f"‚úÖ Ditambahkan: {course_code} ‚Üí {class_id}")
    
    return courses


def setup_telegram():
    """Setup Telegram notification configuration"""
    print("\nüì± SETUP TELEGRAM NOTIFICATIONS (OPTIONAL):")
    print("1. Buka Telegram dan chat dengan @BotFather")
    print("2. Ketik /newbot dan ikuti instruksi untuk membuat bot")
    print("3. Simpan token yang diberikan")
    print("4. Chat dengan @userinfobot untuk mendapat Chat ID Anda")
    print("5. Atau ketik SKIP untuk melewati")
    print()
    
    bot_token = input("Masukkan Telegram Bot Token (atau SKIP): ").strip()
    if bot_token.upper() == 'SKIP':
        return None, None
    
    if not bot_token:
        return None, None
    
    chat_id = input("Masukkan Telegram Chat ID: ").strip()
    if not chat_id:
        return None, None
    
    return bot_token, chat_id


def setup_settings():
    """Setup application settings"""
    print("\n‚öôÔ∏è  SETUP SETTINGS:")
    
    delay = int(get_user_input("Jeda antar siklus (detik)", "45"))
    timeout = int(get_user_input("Timeout request (detik)", "20"))
    
    return {
        "delay_seconds": delay,
        "request_timeout": timeout,
        "verification_delay": 2,
        "inter_request_delay": 2
    }


def main():
    """Main setup function"""
    print("=" * 60)
    print("        WAR KRS SIAKAD ITERA - SETUP WIZARD")
    print("=" * 60)
    
    # Get paths
    config_dir = Path(__file__).parent / "config"
    config_file = config_dir / "config.json"
    env_file = Path(__file__).parent / ".env"
    
    # Check if files already exist
    if env_file.exists():
        overwrite = input(f"\n.env file sudah ada. Timpa? (y/N): ").strip().lower()
        if overwrite not in ['y', 'yes']:
            print("Setup dibatalkan.")
            return
    
    try:
        # Setup cookies
        ci_session, cf_clearance = setup_cookies()
        
        # Setup courses
        courses = setup_courses()
        if not courses:
            print("‚ùå Minimal harus ada satu target course!")
            return
        
        # Setup settings
        settings = setup_settings()
        
        # Setup Telegram (optional)
        telegram_token, telegram_chat_id = setup_telegram()
        
        # Create .env file
        env_content = f"""# WAR KRS SIAKAD ITERA - Environment Variables
# Auto-generated by setup wizard

# SIAKAD Authentication Cookies
CI_SESSION={ci_session}
CF_CLEARANCE={cf_clearance}
"""
        
        # Add Telegram config if provided
        if telegram_token and telegram_chat_id:
            env_content += f"""
# Telegram Notifications
TELEGRAM_BOT_TOKEN={telegram_token}
TELEGRAM_CHAT_ID={telegram_chat_id}
"""
        
        env_content += f"""
# Optional: Override default settings
# DELAY_SECONDS={settings['delay_seconds']}
# REQUEST_TIMEOUT={settings['request_timeout']}
"""
        
        with open(env_file, 'w', encoding='utf-8') as f:
            f.write(env_content)
        
        # Update config.json with courses
        config = {
            "cookies": {
                "ci_session": "ENV:CI_SESSION",
                "cf_clearance": "ENV:CF_CLEARANCE"
            },
            "target_courses": courses,
            "settings": settings,
            "urls": {
                "pilih_mk": "https://siakad.itera.ac.id/mahasiswa/krsbaru/pilihmk",
                "simpan_krs": "https://siakad.itera.ac.id/mahasiswa/krsbaru/simpanKRS"
            }
        }
        
        # Save configuration
        config_dir.mkdir(exist_ok=True)
        with open(config_file, 'w', encoding='utf-8') as f:
            json.dump(config, f, indent=4, ensure_ascii=False)
        
        print(f"\n‚úÖ .env file berhasil dibuat: {env_file}")
        print(f"‚úÖ Configuration berhasil disimpan: {config_file}")
        print("\nüîí PERINGATAN KEAMANAN:")
        print("   - .env file berisi data sensitif, jangan commit ke Git!")
        print("   - .env sudah ditambahkan ke .gitignore")
        print("\nüöÄ Sekarang Anda dapat menjalankan: python main.py")
        
    except KeyboardInterrupt:
        print("\n\n‚ùå Setup dibatalkan oleh user.")
    except Exception as e:
        print(f"\n‚ùå Terjadi kesalahan: {e}")


if __name__ == '__main__':
    main()
